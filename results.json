{
    "tests": [
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineHubSpeed::test_determine_windpower[case0]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineHubSpeed::test_determine_windpower[case1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineHubSpeed::test_determine_windpower[case2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineHubSpeed::test_determine_windpower[case3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineHubSpeed::test_determine_windpower[case4]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::test_determine_windpower[case0]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::test_determine_windpower[case1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::test_determine_windpower[case2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::test_determine_windpower[case3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::test_determine_windpower[case4]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::test_determine_windpower[case5]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::test_determine_windpower[case6]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineMechCoeff::test_standard[case0]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineMechCoeff::test_standard[case1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineMechCoeff::test_standard[case2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineMechCoeff::test_standard[case3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineMechCoeff::test_zero_speed",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineMechPower::test_standard[case0]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineMechPower::test_standard[case1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineMechPower::test_standard[case2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineMechPower::test_standard[case3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineRevenue::test_standard[case0]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineRevenue::test_standard[case1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestDetermineRevenue::test_standard[case2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestPrintTable::test_a_bunch[case0]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestPrintTable::test_a_bunch[case1]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestPrintTable::test_a_bunch[case2]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestPrintTable::test_a_bunch[case3]",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestPrintTableGeneral::test_task_sheet_example",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestPrintTableGeneral::test_alternative_parameters",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestPrintTableGeneral::test_alternative_parameters_2",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestPrintTableGeneral::test_alternative_parameters_3",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestMain::test_main_task_sheet",
            "output": "\nself = <test_a1.TestMain object at 0x7fe3a05c1fd0>, capsys = <_pytest.capture.CaptureFixture object at 0x7fe3a075b210>\nsysin = <_io.StringIO object at 0x7fe3a07a4e50>\n\n    def test_main_task_sheet(self, capsys, sysin):\n        \"\"\" test main task sheet example \"\"\"\n        with open(\"test_data/task_8_in_1\") as filein:\n            sysin.writelines(filein.readlines())\n            sysin.seek(0)\n    \n        with open(\"test_data/main/task_8_out_1.final\") as fileout:\n            expected = fileout.read()\n    \n        self.a1.main()\n        captured = capsys.readouterr()\n>       assert captured.out == expected\nE       AssertionError: assert 'Please enter... sure (y/n): ' == 'Please enter...re (y/n): y\\n'\nE         - Please enter a command: h\nE         ?                         -\nE         + Please enter a command: \nE         - \nE               The available commands are:\nE           \nE               'h' - provide help message...\nE         \nE         ...Full output truncated (34 lines hidden), use '-vv' to show\n\ntests/test_a1.py:667: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "tests/test_a1.py::TestMain::test_main_directory",
            "output": "\nself = <test_a1.TestMain object at 0x7fe3a05d1a90>, capsys = <_pytest.capture.CaptureFixture object at 0x7fe3a076a9d0>\nsysin = <_io.StringIO object at 0x7fe3a07a40d0>\n\n    def test_main_directory(self, capsys, sysin):\n        \"\"\" test main task with data in different directory \"\"\"\n        with open(\"test_data/task_8_in_2\") as filein:\n            sysin.writelines(filein.readlines())\n            sysin.seek(0)\n    \n        with open(\"test_data/main/task_8_out_2.final\") as fileout:\n            expected = fileout.read()\n    \n        self.a1.main()\n        captured = capsys.readouterr()\n>       assert captured.out == expected\nE       AssertionError: assert 'Please enter... sure (y/n): ' == 'Please enter...re (y/n): y\\n'\nE         - Please enter a command: h\nE         ?                         -\nE         + Please enter a command: \nE         - \nE               The available commands are:\nE           \nE               'h' - provide help message...\nE         \nE         ...Full output truncated (36 lines hidden), use '-vv' to show\n\ntests/test_a1.py:680: AssertionError",
            "visibility": "visible"
        }
    ]
}